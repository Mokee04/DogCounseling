{
  "name": "Python 3",
  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
  // "image": "mcr.microsoft.com/devcontainers/python:1-3.11-bullseye",

  // --- 다른 프로젝트의 Dockerfile을 사용하려면 아래 주석을 해제하고 경로를 수정하세요. ---
  "build": {
    "dockerfile": "${localEnv:CAMIBASESOURCE_ROOT}/Dockerfile",
    "context": "${localEnv:CAMIBASESOURCE_ROOT}"
  },

  // "mounts" 설정을 추가하여 Makefile이 포함된 폴더를 컨테이너 내부로 연결합니다.
  "mounts": [
    "source=${localEnv:CAMIBASESOURCE_ROOT},target=/camibase,type=bind,consistency=cached"
  ],

  // --- 다른 프로젝트의 docker-compose.yml을 사용하려면 아래 주석을 해제하고 경로와 서비스 이름을 수정하세요. ---
  // "dockerComposeFile": "../다른-프로젝트-경로/docker-compose.yml",
  // "service": "사용할-서비스-이름", // docker-compose.yml 파일에 정의된 서비스 이름
  // "workspaceFolder": "/workspace", // 컨테이너 내부에서 작업할 폴더 경로

  "customizations": {
    "codespaces": {
      "openFiles": [
        "README.md",
        "app.py"
      ]
    },
    "vscode": {
      "settings": {},
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance"
      ]
    }
  },
  "updateContentCommand": "[ -f packages.txt ] && sudo apt update && sudo apt upgrade -y && sudo xargs apt install -y <packages.txt; [ -f requirements.txt ] && pip3 install --user -r requirements.txt; pip3 install --user streamlit; echo '✅ Packages installed and Requirements met'",
  "postAttachCommand": {
    "server": "streamlit run app.py --server.enableCORS false --server.enableXsrfProtection false"
  },
  "portsAttributes": {
    "8501": {
      "label": "Application",
      "onAutoForward": "openPreview"
    }
  },
  "forwardPorts": [
    8501
  ]
}